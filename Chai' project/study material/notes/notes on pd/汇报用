## 柴项目整体流程介绍

TiDB 是一个分布式系统，它希望做到：

- 跨数据中心容灾
- 写入速度快
- 方便读取数据
- 支持并发修改
- 原子地修改多条记录

TiKV是为了解决数据存储问题产生的项目，可以将TiKV看成一个巨大的map,每一行都是key-Value pair

RocksDB: TiKV把数据保存在RocksDB中，具体数据的存储是由RocksDB负责的

Raft:高效处理副本失效的数据管理策略

Region:一个TiKV中有多个Region

事务：Percolator模型

#### 调度

作为一个分布式**高可用存储系统**，必须满足以下四种需求：
- 副本数量控制，不多不少刚刚好
- 副本分布在不同机器上
- 新加节点，可以将其他节点的副本迁移过来
- 节点下线后，需要将这个节点的数据迁移走

作为一个良好分布式系统，需要优化：
- 维持集群leader分布均匀
- 维持每个节点储存容量均匀
- 控制balance速度
- 管理节点状态

物理机器上存在许多TiKV，每个TiKV又被分成许多region,在这个项目中，只存在key-value pairs 

Raft 是一个调度策略，其中的主角是 leader, leader 先进行数据操作，再将日志发送给follower，follower接下来进行数据操作

在项目背景下，是以region为单位进行数据操作的

PD像是大脑，在控制各个节点的数据操作，以及节点之间数据转移等操作

TiKV要定期向PD汇报整个TiKV（store)的信息
